// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.11");

            modelBuilder.Entity("Core.Entitities.Developer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("JoinedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SpecializeIn")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Developers");
                });

            modelBuilder.Entity("Core.Entitities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProjectManagerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProjectManagerId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Core.Entitities.ProjectManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("JoinedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProjectManagers");
                });

            modelBuilder.Entity("Core.Entitities.Submiter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BussinessTypes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("JoinedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("Submiters");
                });

            modelBuilder.Entity("Core.Entitities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BugSevarity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BugStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("DeveloperId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SubmiterId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TicketHistoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeveloperId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SubmiterId");

                    b.HasIndex("TicketHistoryId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Core.Entitities.Developer", b =>
                {
                    b.HasOne("Core.Entitities.Project", "Project")
                        .WithMany("Developers")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Core.Entitities.Project", b =>
                {
                    b.HasOne("Core.Entitities.ProjectManager", "ProjectManager")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectManagerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ProjectManager");
                });

            modelBuilder.Entity("Core.Entitities.Submiter", b =>
                {
                    b.HasOne("Core.Entitities.Project", "Project")
                        .WithOne("Submiter")
                        .HasForeignKey("Core.Entitities.Submiter", "ProjectId");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Core.Entitities.Ticket", b =>
                {
                    b.HasOne("Core.Entitities.Developer", "Developer")
                        .WithMany("AssignedTickets")
                        .HasForeignKey("DeveloperId");

                    b.HasOne("Core.Entitities.Project", "Project")
                        .WithMany("Tickets")
                        .HasForeignKey("ProjectId");

                    b.HasOne("Core.Entitities.Submiter", "Submiter")
                        .WithMany("Tickets")
                        .HasForeignKey("SubmiterId");

                    b.HasOne("Core.Entitities.Ticket", "TicketHistory")
                        .WithMany("TicketHistories")
                        .HasForeignKey("TicketHistoryId");

                    b.Navigation("Developer");

                    b.Navigation("Project");

                    b.Navigation("Submiter");

                    b.Navigation("TicketHistory");
                });

            modelBuilder.Entity("Core.Entitities.Developer", b =>
                {
                    b.Navigation("AssignedTickets");
                });

            modelBuilder.Entity("Core.Entitities.Project", b =>
                {
                    b.Navigation("Developers");

                    b.Navigation("Submiter");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Core.Entitities.ProjectManager", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Core.Entitities.Submiter", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Core.Entitities.Ticket", b =>
                {
                    b.Navigation("TicketHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
